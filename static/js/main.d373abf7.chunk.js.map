{"version":3,"sources":["firebase.js","SearchBar.js","FormSubmit.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SearchBar","action","method","forhtml","onChange","this","props","handleChange","value","contacts","type","placeholder","name","required","onClick","handleSearch","Component","FormSubmit","id","number","handleClick","App","event","preventDefault","setState","target","axios","url","responseType","params","key","mime_types","then","response","console","log","data","dbRef","database","ref","state","image","push","handleRemove","contactDelete","child","remove","results","filter","item","search","searchResults","on","newState","val","className","map","contact","index","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+RAcAA,IAASC,cAVY,CACjBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECMeS,G,4KAhBP,OACI,6BACI,4CACA,0BAAMC,OAAO,GAAGC,OAAO,OACnB,2BAAOC,QAAQ,WACf,2BAAOC,SAAUC,KAAKC,MAAMC,aAAcC,MAAOH,KAAKC,MAAMG,SAAS,IAAKC,KAAK,OAAOC,YAAY,iBAAiBC,KAAK,SAASC,UAAQ,IACzI,2BAAOV,QAAQ,WACf,2BAAOW,QAAST,KAAKC,MAAMS,aAAcL,KAAK,SAASF,MAAM,iB,GAVzDQ,cC0BTC,E,uKArBP,OACG,6BACK,8CACA,0BAAMhB,OAAO,UACL,6BACI,2BAAOE,QAAQ,SACnB,2BAAOQ,YAAY,OAAOD,KAAK,OAAOE,KAAK,OAAOM,GAAG,OAAOd,SAAUC,KAAKC,MAAMC,aAAcC,MAAOH,KAAKC,MAAMG,SAASG,KAAMC,UAAQ,IAEpI,2BAAOV,QAAQ,WACnB,2BAAOQ,YAAY,mBAAmBD,KAAK,OAAOE,KAAK,SAASR,SAAUC,KAAKC,MAAMC,aAAcC,MAAOH,KAAKC,MAAMG,SAASU,OAAQN,UAAQ,IAE1I,2BAAOV,QAAQ,WACnB,2BAAOW,QAAST,KAAKC,MAAMc,YAAaV,KAAK,SAASF,MAAM,uB,GAjB3DQ,aCiLVK,E,kDA1Kb,aAAe,IAAD,8BACZ,gBAuCFd,aAAe,SAACe,GACdA,EAAMC,iBAEN,EAAKC,SAAL,eACGF,EAAMG,OAAOb,KAAOU,EAAMG,OAAOjB,SA5CxB,EAmDdY,YAAc,SAACE,GACZA,EAAMC,iBACNG,IAAM,CACJC,IACE,0GACFzB,OAAQ,MACR0B,aAAc,OACdC,OAAQ,CACNC,IAAK,uCACLC,WAAY,SAGbC,MAAK,SAACC,GACPC,QAAQC,IAAIF,EAASG,MAGrB,IAAMC,EAAQ9C,EAAS+C,WAAWC,MAC5B9B,EAAW,CACfG,KAAM,EAAK4B,MAAM5B,KACjBO,OAAQ,EAAKqB,MAAMrB,OACnBsB,MAAO,EAAKD,MAAMC,OAGpBJ,EAAMK,KAAKjC,GAEX,EAAKe,SAAS,CACZZ,KAAM,GACNO,OAAQ,SA9ED,EAyFdwB,aAAe,SAACC,GAGArD,EAAS+C,WAAWC,MAE5BM,MAAMD,GAAeE,UA9Ff,EAiGd/B,aAAe,SAACO,GACdA,EAAMC,iBAGP,IAAMwB,EAAU,EAAKP,MAAM/B,SAASuC,QAAO,SAACC,GAC3C,OAAOA,EAAKxC,SAASG,OAAS,EAAK4B,MAAMU,UAGzChB,QAAQC,IAAIY,GACZ,EAAKvB,SAAS,CACZ0B,OAAQ,GACRC,cAAeJ,KA1GjB,EAAKP,MAAQ,CACX/B,SAAU,GACVG,KAAM,GACNO,OAAQ,GACR+B,OAAQ,GACRC,cAAe,GACfV,MAAO,2CARG,E,gEAeO,IAAD,OAGJlD,EAAS+C,WAAWC,MAE5Ba,GAAG,SAAS,SAACnB,GACnB,IAAMoB,EAAU,GACVjB,EAAOH,EAASqB,MAEtB,IAAK,IAAMxB,KAAOM,EAChBiB,EAASX,KAAK,CACZZ,IAAKA,EACLrB,SAAU2B,EAAKN,KAInB,EAAKN,SAAS,CACZf,SAAU4C,S,+BAiFJ,IAAD,OACP,OACE,gCACE,yBAAKE,UAAU,WACX,4CACE,6BACA,kBAAC,EAAD,CAAYhD,aAAgBF,KAAKE,aAAcE,SAAYJ,KAAKmC,MAAM/B,SAAUW,YAAef,KAAKe,eAGpG,4BAGIf,KAAKmC,MAAM/B,SAAS+C,KAAI,SAACC,EAAQC,GAAY,OAAIA,EAAQ,EAChD,KAGL,wBAAI5B,IAAK2B,EAAQ3B,KACf,2BACE,uCADF,IACsB2B,EAAQhD,SAASG,KAAK,2CAAuB6C,EAAQhD,SAASU,OAClF,4BAAQL,QAAS,kBAAM,EAAK6B,aAAac,EAAQ3B,OAAjD,iBAShB,kBAAC,EAAD,CAAWvB,aAAcF,KAAKE,aAAcE,SAAUJ,KAAKmC,MAAM/B,SAAUM,aAAcV,KAAKU,eAC9F,4BAGIV,KAAKmC,MAAMW,cAAcK,KAAI,SAACC,GAC5B,OACE,wBAAI3B,IAAK2B,EAAQ3B,KACf,2BACE,uCADF,IACsB2B,EAAQhD,SAASG,KAAK,2CAAuB6C,EAAQhD,SAASU,QAEpF,6BAEM,yBAAKwC,IAAKF,EAAQhD,SAASgC,MAAOmB,IAAI,oB,GA1J9C5C,aCGE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.d373abf7.chunk.js","sourcesContent":["import firebase from 'firebase/app'; //firebase\nimport 'firebase/database'; //firebase database\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBD0Vejc_IgwUr9I4YWdZGjkYwcz2OvsLU\",\n    authDomain: \"phonebook-2785b.firebaseapp.com\",\n    databaseURL: \"https://phonebook-2785b.firebaseio.com\",\n    projectId: \"phonebook-2785b\",\n    storageBucket: \"phonebook-2785b.appspot.com\",\n    messagingSenderId: \"519476128752\",\n    appId: \"1:519476128752:web:ac171a3a781bb6342f0b35\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport './App.css';\n\nclass SearchBar extends Component {\n\n    render() {\n        return (\n            <div>\n                <h2>Contact list</h2>\n                <form action=\"\" method=\"get\">\n                    <label forhtml=\"search\"></label>\n                    <input onChange={this.props.handleChange} value={this.props.contacts['']} type=\"text\" placeholder=\"search contact\" name=\"search\" required/>\n                    <label forhtml=\"Search\"></label>\n                    <input onClick={this.props.handleSearch} type=\"submit\" value=\"search\" />\n                </form>\n                \n            </div>\n           \n        )\n    }\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport './App.css';\n\nclass FormSubmit extends Component {\n\n  \n\n    render() {\n        return (\n           <div>\n                <h2>Create contact</h2>\n                <form action=\"submit\">\n                        <div>\n                            <label forhtml=\"name\"></label>\n                        <input placeholder=\"Name\" type=\"text\" name=\"name\" id=\"name\" onChange={this.props.handleChange} value={this.props.contacts.name} required />\n\n                            <label forhtml=\"number\"></label>\n                        <input placeholder=\"Cellphone Number\" type=\"text\" name=\"number\" onChange={this.props.handleChange} value={this.props.contacts.number} required />\n\n                            <label forhtml=\"Submit\"></label>\n                        <input onClick={this.props.handleClick} type=\"submit\" value=\"New Contact\" />\n                        </div>\n                        \n                 </form>\n           </div>\n        )\n    }\n}\n\nexport default FormSubmit;","\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport firebase from \"./firebase\";\nimport SearchBar from './SearchBar';\nimport FormSubmit from './FormSubmit';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      contacts: [],\n      name: \"\",\n      number: \"\",\n      search: \"\",\n      searchResults: [],\n      image: \"https:cdn2.thecatapi.com/images/6ql.gif\",\n      //Array(\"https://cdn2.thecatapi.com/images/6ql.gif\",\n      //\"https://cdn2.thecatapi.com/images/3ln.gif\",\n      //\"https://cdn2.thecatapi.com/images/2or.gif\")\n    };\n  }\n\n  componentDidMount() {\n\n    // create a Firebase reference\n    const dbRef = firebase.database().ref();\n  \n    dbRef.on(\"value\", (response) => {\n    const newState =[];\n    const data = response.val();\n\n    for (const key in data) {\n      newState.push({\n        key: key,\n        contacts: data[key]\n      });\n    }\n    // update our React state \n    this.setState({\n      contacts: newState,\n    });\n  });\n  }\n\n\n\n  // get user input and update the userInput state\n  handleChange = (event) => {\n    event.preventDefault();\n    //console.log(event.target.value);  // user input data\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n\n \n      \n  handleClick = (event) => {\n     event.preventDefault();\n     axios({\n       url:\n         \"https://api.thecatapi.com/v1/images/search/?api_key=85887931-8d04-4f23-a9fd-380b976e7e87&mime_types=gif\",\n       method: \"GET\",\n       responseType: \"JSON\",\n       params: {\n         key: \"85887931-8d04-4f23-a9fd-380b976e7e87\",\n         mime_types: \"gif\",\n\n       },\n     }).then((response) => {\n       console.log(response.data);\n\n       // open portal to Firebase\n       const dbRef = firebase.database().ref();\n       const contacts = {\n         name: this.state.name,\n         number: this.state.number,\n         image: this.state.image,\n       };\n       // add new record to Firebase\n       dbRef.push(contacts);\n       // reset input field\n       this.setState({\n         name: \"\",\n         number: \"\",\n       });\n     });\n  };\n\n //selectedRandomImage = () => {\n //cost randomImage = image[Math.floor(Math.random() * image.length)];\n//}\n\n\n  // delete that specific contact from Firebase\n  handleRemove = (contactDelete) => {\n   // console.log(contactDelete);\n    // open portal to Firebase\n    const dbRef = firebase.database().ref();\n    // delete the book based on bookKey\n    dbRef.child(contactDelete).remove();\n  };\n\n  handleSearch = (event) => {\n    event.preventDefault();\n\n// this.state.search is the state that we want to look for / inside search contact[]\n   const results = this.state.contacts.filter((item) => {\n    return item.contacts.name === this.state.search\n\n   })\n    console.log(results)\n    this.setState({\n      search: \"\",\n      searchResults: results\n    })\n  \n  }\n\n  render() {\n    return (\n      <header>\n        <div className=\"wrapper\">\n            <h1>My PhoneBook</h1>\n              <div>\n              <FormSubmit handleChange = {this.handleChange} contacts = {this.state.contacts} handleClick = {this.handleClick} />\n              \n              </div>  \n              <ul>\n                {\n                  // display  here\n                  this.state.contacts.map((contact,index) => { if (index > 2) {\n                    return null\n                  }\n                    return (\n                      <li key={contact.key}>\n                        <p>\n                          <span>Name:</span> {contact.contacts.name}<span> Number: </span>{contact.contacts.number}\n                          <button onClick={() => this.handleRemove(contact.key)}> delete</button>\n                        </p>\n                        {/* button to delete contact */}\n                        \n                      </li>\n                    );\n                  })\n                }\n            </ul>\n          <SearchBar handleChange={this.handleChange} contacts={this.state.contacts} handleSearch={this.handleSearch}/>\n          <ul>\n            {\n              // display  here \n              this.state.searchResults.map((contact) => {\n                return (\n                  <li key={contact.key}>\n                    <p>\n                      <span>Name:</span> {contact.contacts.name}<span> Number: </span>{contact.contacts.number}\n                    </p>\n                    <div>\n                      \n                          <img src={contact.contacts.image} alt=\"cat\" />\n                      \n                        \n                    </div>\n\n                  </li>\n                );\n              })\n            }\n          </ul>\n\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}