{"version":3,"sources":["firebase.js","SearchBar.js","FormSubmit.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SearchBar","action","method","forhtml","onChange","this","props","handleChange","value","contacts","type","placeholder","name","required","onClick","handleSearch","class","Component","FormSubmit","event","preventDefault","document","getElementById","textContent","setState","target","state","number","id","handleClick","App","axios","url","responseType","params","key","mime_types","then","response","picture","data","dbRef","database","ref","image","push","handleRemove","contactDelete","child","remove","results","filter","item","search","console","log","searchResults","on","newState","val","className","map","contact","index","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.872211c6.chunk.js","sourcesContent":["import firebase from 'firebase/app'; //firebase\nimport 'firebase/database'; //firebase database\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBD0Vejc_IgwUr9I4YWdZGjkYwcz2OvsLU\",\n    authDomain: \"phonebook-2785b.firebaseapp.com\",\n    databaseURL: \"https://phonebook-2785b.firebaseio.com\",\n    projectId: \"phonebook-2785b\",\n    storageBucket: \"phonebook-2785b.appspot.com\",\n    messagingSenderId: \"519476128752\",\n    appId: \"1:519476128752:web:ac171a3a781bb6342f0b35\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport './App.css';\n\n//SearchBar COMPONENT\nclass SearchBar extends Component {\n\n    render() {\n        return (\n            //GET USER INPUT / DISPLAY INFORMATION IN RENDER IN APP\n            <div>\n                <h2>Contact list</h2>\n                <form action=\"\" method=\"get\">\n                    <label forhtml=\"search\"></label>\n                    <input onChange={this.props.handleChange} value={this.props.contacts['']} type=\"text\" placeholder=\"search contact\" name=\"search\" required/>\n                    <label forhtml=\"Search\"></label>\n                    <input onClick={this.props.handleSearch} type=\"submit\" value=\"search\" />\n                </form>\n                <p class=\"text-info\">create contact before searching</p>\n                \n            </div>\n           \n        )\n    }\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport './App.css';\n\n// FormSubmit COMPONENT\nclass FormSubmit extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      number: \"\",\n    };\n  }\n  // GET USER INPUT AND UPDATE STATE\n  handleChange = (event) => {\n    event.preventDefault();\n    document.getElementById(\"error\").textContent = \"\";\n\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  render() {\n    return (\n      //WHEN USER PUT INPUT / DISPLAY INFORMATION IN RENDER\n      <div>\n        <h2>Create contact</h2>\n        <p id=\"error\"></p>\n        <form action=\"submit\">\n          <label forhtml=\"name\"></label>\n          <input\n            placeholder=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            onChange={this.handleChange}\n            value={this.state.name}\n          />\n\n          <label forhtml=\"number\"></label>\n          <input\n            placeholder=\"Cellphone Number\"\n            type=\"text\"\n            name=\"number\"\n            id=\"number\"\n            onChange={this.handleChange}\n            value={this.state.number}\n          />\n\n          <label forhtml=\"Submit\"></label>\n          <input\n            onClick={(event) =>\n              this.props.handleClick(event, this.state.name, this.state.number)\n            }\n            type=\"submit\"\n            value=\"New Contact\"\n          />\n        </form>\n        <p class=\"text-info\">only 3 contact will be display</p>\n      </div>\n    );\n  }\n}\n\nexport default FormSubmit;","\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport firebase from \"./firebase\";\nimport SearchBar from './SearchBar';\nimport FormSubmit from './FormSubmit';\nimport './App.css';\n\n//APP COMPONENT\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      contacts: [],\n      name: \"\",\n      number: \"\",\n      search: \"\",\n      searchResults: [],\n    };\n  }\n\n  componentDidMount() {\n    // CREATE A FIREBASE REFERENCE\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (response) => {\n      const newState = [];\n      const data = response.val();\n      // CREATE KEY\n      for (const key in data) {\n        newState.push({\n          key: key,\n          contacts: data[key],\n        });\n      }\n      //UPDATING REACT INPUT\n      this.setState({\n        contacts: newState,\n      });\n    });\n  }\n\n  //GET USER INPUT AND UPDATE STATE\n  handleChange = (event) => {\n   event.preventDefault();\n\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n   };\n\n  //HANDLE CLICK FUNCTION / GETTING API DATA\n  handleClick = (event,name,number) => {\n    event.preventDefault();\n   if (name === \"\" || number === \"\")  {\n        //alert(\"please fill in the blanks \");\n        document.getElementById('error').textContent = 'please fill in the blanks';\n        \n        } else { \n          \n\n     axios({\n       url:\n         \"https://api.thecatapi.com/v1/images/search/?api_key=85887931-8d04-4f23-a9fd-380b976e7e87&mime_types=gif\",\n       method: \"GET\",\n       responseType: \"JSON\",\n       params: {\n         key: \"85887931-8d04-4f23-a9fd-380b976e7e87\",\n         mime_types: \"gif\",\n       },\n     }).then((response) => {\n       //STORE URL IN VARIABLE\n       const picture = response.data[0].url;\n\n       // OPEN PORTAL TO FIREBASE\n       const dbRef = firebase.database().ref();\n       const contacts = {\n         name: name,\n         number: number,\n         image: picture,\n       };\n       // ADD NEW RECORD TO FIREBASE\n       dbRef.push(contacts);\n\n       // // RESET INPUT FIELD WHEN FORM IS SUBMITTED\n       // this.setState({\n       //   name: \"\",\n       //   number: \"\",\n       //});\n     });\n    }\n  };\n  \n  // DELETE SELECTED USER FROM FIREBASE\n  handleRemove = (contactDelete) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(contactDelete).remove();\n  };\n\n  //HANDLE SEARCH\n  handleSearch = (event) => {\n    event.preventDefault();\n    // MATCHING CONTACT WHEN USER CLICK SEARCH\n    const results = this.state.contacts.filter((item) => {\n      return item.contacts.name === this.state.search;\n    });\n    console.log(results);\n    this.setState({\n      search: \"\",\n      searchResults: results,\n    });\n  };\n\n  //RENDER = HTML\n  render() {\n    return (\n      <header>\n        <div className=\"wrapper\">\n          <h1>My PhoneBook</h1>\n          <div>\n            <FormSubmit\n              handleChange={this.handleChange}\n              contacts={this.state.contacts}\n              name={this.state.name}\n              number={this.state.number}\n              handleClick={this.handleClick}\n            />\n          </div>\n          <ul>\n            {\n              //CONTACT WILL BE DISPLAY\n\n              this.state.contacts.map((contact, index) => {\n                if (index > 2) {\n                  return null;\n                }\n\n                return (\n                  <li key={contact.key}>\n                    <p>\n                      <span>Name:</span> {contact.contacts.name}\n                      <span> Number: </span>\n                      {contact.contacts.number}\n                      {/* CONTACT WILL BE DELETE WHEN USER CLICK BUTTON */}\n                      <button onClick={() => this.handleRemove(contact.key)}>\n                        {\" \"}\n                        delete\n                      </button>\n                    </p>\n                  </li>\n                );\n              })\n            }\n          </ul>\n          {/* SEARCH COMPONENT WILL DISPLAY HERE */}\n          <SearchBar\n            handleChange={this.handleChange}\n            contacts={this.state.contacts}\n            handleSearch={this.handleSearch}\n          />\n          <ul>\n            {\n              // WHEN USER CLICK SEARCH CONTACT STORED IN FIREBASE WILL BE DISPLAY HERE WITH A IMAGE USE FROM API\n              this.state.searchResults.map((contact) => {\n                return (\n                  <li key={contact.key}>\n                    <p>\n                      <span>Name:</span> {contact.contacts.name}\n                      <span> Number: </span>\n                      {contact.contacts.number}\n                    </p>\n                    <div>\n                      <img src={contact.contacts.image} alt=\"cat\" />\n                    </div>\n                  </li>\n                );\n              })\n            }\n          </ul>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default App;\n\n \n  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}